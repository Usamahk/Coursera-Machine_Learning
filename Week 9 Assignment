Last login: Fri Feb 19 16:35:50 on ttys000
Usamahs-MacBook-Pro:~ Usamahk$ /usr/local/octave/3.8.0/bin/octave-3.8.0 ; exit;
GNU Octave, version 3.8.0
Copyright (C) 2013 John W. Eaton and others.
This is free software; see the source code for copying conditions.
There is ABSOLUTELY NO WARRANTY; not even for MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  For details, type 'warranty'.

Octave was configured for "x86_64-apple-darwin13.0.0".

Additional information about Octave is available at http://www.octave.org.

Please contribute if you find this software useful.
For more information, visit http://www.octave.org/get-involved.html

Read http://www.octave.org/bugs.html to learn how to submit bug reports.
For information about changes from previous versions, type 'news'.

octave:1> PS1 ('>> ')
>> cd '~/Documents/Courses and Books/Coursera/Machine Learning/ex8'
>> ex8



Visualizing example dataset for outlier detection.

Program paused. Press enter to continue.
Visualizing Gaussian fit.

Program paused. Press enter to continue.
Best epsilon found using cross-validation: 0.000000e+00
Best F1 on Cross Validation Set:  0.000000
   (you should see a value epsilon of about 8.99e-05)

Program paused. Press enter to continue.
Best epsilon found using cross-validation: 0.000000e+00
Best F1 on Cross Validation Set:  0.000000
# Outliers found: 0
   (you should see a value epsilon of about 1.38e-18)

>> whos
Variables in the current scope:

   Attr Name          Size                     Bytes  Class
   ==== ====          ====                     =====  ===== 
        F1            1x1                          8  double
        X          1000x11                     88000  double
        Xval        100x11                      8800  double
        epsilon       1x1                          8  double
        mu           11x1                         88  double
        outliers      0x1                          0  double
        p          1000x1                       8000  double
        pval        100x1                        800  double
        sigma2       11x1                         88  double
        yval        100x1                        800  double

Total is 13324 elements using 106592 bytes

>> mu
mu =

   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0

>> mu = (1/m).*sum(X);
error: 'm' undefined near line 1 column 9
>> [m,n] = size(X);
>> mu = (1/m).*sum(X);
>> mu
mu =

 Columns 1 through 8:

    4.9394   -9.6373   13.8147  -10.4645   -7.9562   10.1995   -6.0194    7.9698

 Columns 9 through 11:

   -6.2532    2.3245    8.4737

>> sigma2 = (1/m)*sum((X-mu)^2);
warning: operator -: automatic broadcasting operation applied
error: for A^b, A must be a square matrix. Use .^ for elementwise power.
error: evaluating argument list element number 1
>> sigma2 = (1/m)*sum((X-mu).^2);
warning: operator -: automatic broadcasting operation applied
>> sigma2 = (1/m)*sum((X.-mu).^2);
warning: operator -: automatic broadcasting operation applied
>> sigma2 = (1/m)*sum((X-mu).^2);
warning: operator -: automatic broadcasting operation applied
>> mu
mu =

 Columns 1 through 8:

    4.9394   -9.6373   13.8147  -10.4645   -7.9562   10.1995   -6.0194    7.9698

 Columns 9 through 11:

   -6.2532    2.3245    8.4737

>> X
X =

 Columns 1 through 6:

   6.6531e+00   1.3690e+01   1.7553e+01  -1.1933e+01  -5.7564e+00   1.5436e+01
  -5.6305e+00  -1.8938e+01   1.8645e+01  -6.1558e+00  -2.5989e+01   1.5410e+01
   9.7215e+00  -9.9825e+00   1.5571e+01  -3.2224e+01  -5.5958e+00   2.4321e+01
  -4.6358e+00  -1.0716e+01   2.0357e+01  -9.0021e+00  -4.9206e+00  -4.2620e+00
  -1.2841e+01  -2.0388e+01   9.4919e+00  -7.0385e+00  -9.9211e+00  -3.7161e+00
  -1.1635e+00  -1.6766e+01   1.7259e+00  -2.0025e+01  -1.1136e+01   2.5631e+01
   1.0212e+01  -8.9245e+00   1.2740e+01  -1.0781e+01  -9.4646e+00   8.9757e+00
   8.4712e+00  -1.9359e+01   9.9105e+00  -2.1284e+00  -1.0813e+01   9.3217e+00
  -2.6594e+00  -1.2959e+01   1.8130e+01  -5.6247e+00  -3.7656e-01   1.3589e+01
   1.5108e+01  -1.6431e+01   1.9707e+01  -1.9812e+01  -1.6445e+00  -6.4442e+00
  -1.1220e-01  -2.4247e+01   2.9199e+01  -8.0656e+00  -1.0418e+01   1.1621e+01
  -1.5423e-01  -2.4233e+01   3.6066e+00  -5.6230e+00  -1.4417e+01   6.7292e+00
   1.1148e+01  -1.5264e+01   2.1708e+01  -1.7421e+01  -9.2360e+00  -1.2268e+01
   1.7534e+01  -6.4360e+00   1.5712e+01  -1.5192e+01  -2.4887e+00   2.1372e+01
   6.2807e+00  -1.0239e+01   1.5879e+01  -1.1929e+01  -1.0441e+01   7.0447e+00
   2.4654e+00  -9.2025e+00   1.0541e+01  -4.4878e+00  -6.1245e+00   1.5648e+00
   1.2191e+01  -1.1969e+01   1.2510e+01  -1.9492e+01  -7.5007e-01   1.2719e+01
   8.6845e+00  -1.7206e+01   2.3032e+01  -1.2426e+01   4.5130e+00   1.2355e+01
   2.1513e+01  -1.0613e+01   2.3677e+01   1.6820e-01  -8.7994e-01   6.6211e+00
warning: broken pipe
>> sigma2 = (1/m)*sum((X-mu')^2);
error: operator -: nonconformant arguments (op1 is 1000x11, op2 is 11x1)
error: evaluating argument list element number 1
>> sigma2 = std(X)^2;
error: for A^b, A must be a square matrix. Use .^ for elementwise power.
>> sigma2 = std(X).^2;
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Login (email address): usamah.khan@gmail.com
Token: 7cdXYaxF5fK1KXSI
== 
==                                   Part Name |     Score | Feedback
==                                   --------- |     ----- | --------
==                Estimate Gaussian Parameters |   0 /  15 | 
==                            Select Threshold |   0 /  15 | 
==                Collaborative Filtering Cost |   0 /  20 | 
==            Collaborative Filtering Gradient |   0 /  30 | 
==                            Regularized Cost |   0 /  10 | 
==                        Regularized Gradient |   0 /  10 | 
==                                   --------------------------------
==                                             |   0 / 100 | 
== 
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
== 
==                                   Part Name |     Score | Feedback
==                                   --------- |     ----- | --------
==                Estimate Gaussian Parameters |   0 /  15 | 
==                            Select Threshold |   0 /  15 | 
==                Collaborative Filtering Cost |   0 /  20 | 
==            Collaborative Filtering Gradient |   0 /  30 | 
==                            Regularized Cost |   0 /  10 | 
==                        Regularized Gradient |   0 /  10 | 
==                                   --------------------------------
==                                             |   0 / 100 | 
== 
>> xNew = sum(X)
xNew =

 Columns 1 through 6:

   4.9394e+03  -9.6373e+03   1.3815e+04  -1.0464e+04  -7.9562e+03   1.0200e+04

 Columns 7 through 11:

  -6.0194e+03   7.9698e+03  -6.2532e+03   2.3245e+03   8.4737e+03

>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
== 
==                                   Part Name |     Score | Feedback
==                                   --------- |     ----- | --------
==                Estimate Gaussian Parameters |   0 /  15 | 
==                            Select Threshold |   0 /  15 | 
==                Collaborative Filtering Cost |   0 /  20 | 
==            Collaborative Filtering Gradient |   0 /  30 | 
==                            Regularized Cost |   0 /  10 | 
==                        Regularized Gradient |   0 /  10 | 
==                                   --------------------------------
==                                             |   0 / 100 | 
== 
>> X(:,1)
ans =

    6.653114
   -5.630542
    9.721525
   -4.635766
  -12.841044
   -1.163487
   10.211546
    8.471216
   -2.659367
   15.107877
   -0.112204
   -0.154226
   11.148476
   17.533601
    6.280674
    2.465444
   12.191427
    8.684488
   21.513475
   -3.527501
   12.411706
   20.946754
>> X(1,:)
ans =

 Columns 1 through 8:

    6.6531   13.6897   17.5528  -11.9335   -5.7564   15.4359  -12.1368    8.2241

 Columns 9 through 11:

   -4.8840    5.3493   17.3514

>> for i = 1:m
> 
> mu[i] = (1/m).*sum(X[i,:]);
parse error:

  syntax error

>>> mu[i] = (1/m).*sum(X[i,:]);
      ^

>> 
>> end
parse error:

  syntax error

>>> end
      ^

>> for i = 1:m
> 
> mu[i,1] = (1/m).*sum(X[i,:]);
parse error:

  syntax error

>>> mu[i,1] = (1/m).*sum(X[i,:]);
      ^

>> 
>> end
parse error:

  syntax error

>>> end
      ^

>> for i = 1:m
> 
> mu[i,1] = (1/m).*sum(X[i,:]);
parse error:

  syntax error

>>> mu[i,1] = (1/m).*sum(X[i,:]);
      ^

>> 
>> end
parse error:

  syntax error

>>> end
      ^

>> for i = 1:m
> 
> mu[i,1] = (1/m).*sum(X[i,:]);
parse error:

  syntax error

>>> mu[i,1] = (1/m).*sum(X[i,:]);
      ^

>> 
>> endfor i = 1:m
parse error:

  syntax error

>>> endfor i = 1:m
         ^

>> 
>> mu(i,1) = (1/m).*sum(X(i,:));
error: attempted to use a complex scalar as an index
       (forgot to initialize i or j?)
error: evaluating argument list element number 1
>> 
>> end
parse error:

  syntax error

>>> end
      ^

>> for i = 1:m
> 
> mu(i,1) = (1/m).*sum(X(i,:));
> 
> end
>> mu
mu =

 Columns 1 through 7:

    0.04955   -9.63727   13.81471  -10.46449   -7.95623   10.19950   -6.01941
   -0.01948    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.03165    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.02196    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.04463    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.03532    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.01184    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.02373    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.01880    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.01290    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.00259    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.05004    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.01795    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.04765    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.01450    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.02199    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.00782    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.01891    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.02743    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
warning: broken pipe
>> for i = 1:m
> 
> mu(i,1) = (1/m).*sum(X(i,:));
> 
> end
>> 
>> mu
mu =

 Columns 1 through 7:

    0.04955   -9.63727   13.81471  -10.46449   -7.95623   10.19950   -6.01941
   -0.01948    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.03165    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.02196    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.04463    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.03532    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.01184    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.02373    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.01880    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.01290    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.00259    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.05004    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.01795    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.04765    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.01450    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.02199    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.00782    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.01891    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.02743    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
warning: broken pipe
>> for i = 1:m
> sum(X(i,:));
> end
>> for i = 1:m
> xNew = sum(X(i,:));
> end
>> whos
Variables in the current scope:

   Attr Name          Size                     Bytes  Class
   ==== ====          ====                     =====  ===== 
        F1            1x1                          8  double
        X          1000x11                     88000  double
        Xval        100x11                      8800  double
        ans           1x1                          8  double
        epsilon       1x1                          8  double
        i             1x1                          8  double
        m             1x1                          8  double
        mu         1000x11                     88000  double
        n             1x1                          8  double
        outliers      0x1                          0  double
        p          1000x1                       8000  double
        pval        100x1                        800  double
        sigma2        1x11                        88  double
        xNew          1x1                          8  double
        yval        100x1                        800  double

Total is 24318 elements using 194544 bytes

>> xNew = size(X)
xNew =

   1000     11

>> xNew = zeros(size(X),1)
xNew =

   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
>> xNew
xNew =

   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
>> whos
Variables in the current scope:

   Attr Name          Size                     Bytes  Class
   ==== ====          ====                     =====  ===== 
        F1            1x1                          8  double
        X          1000x11                     88000  double
        Xval        100x11                      8800  double
        ans           1x1                          8  double
        epsilon       1x1                          8  double
        i             1x1                          8  double
        m             1x1                          8  double
        mu         1000x11                     88000  double
        n             1x1                          8  double
        outliers      0x1                          0  double
        p          1000x1                       8000  double
        pval        100x1                        800  double
        sigma2        1x11                        88  double
        xNew       1000x1                       8000  double
        yval        100x1                        800  double

Total is 25317 elements using 202536 bytes

>> xNew(1)
ans = 0
>> for i = 1:m
> xNew(i) = sum(X(i,:));
> end
>> xNew(1:10)
ans =

   49.546
  -19.476
   31.646
  -21.965
  -44.632
  -35.320
   11.839
   23.732
   18.799
   12.904

>> [m, n] = size(X);
>> n
n =  11
>> m
m =  1000
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
!! Submission failed: unexpected error: operator -: nonconformant arguments (op1 is 4x5, op2 is 5x1)
!! Please try again later.
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
!! Submission failed: unexpected error: parse error near line 26 of file /Users/Usamahk/Documents/Courses and Books/Coursera/Machine Learning/ex8/estimateGaussian.m

  syntax error

>>> sigma2(i) = sum((X(i,:).-mu).^2;
                                   ^

!! Please try again later.
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
warning: operator -: automatic broadcasting operation applied
!! Submission failed: unexpected error: A(I) = X: X must have the same size as I
!! Please try again later.
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
== 
==                                   Part Name |     Score | Feedback
==                                   --------- |     ----- | --------
==                Estimate Gaussian Parameters |   0 /  15 | 
==                            Select Threshold |   0 /  15 | 
==                Collaborative Filtering Cost |   0 /  20 | 
==            Collaborative Filtering Gradient |   0 /  30 | 
==                            Regularized Cost |   0 /  10 | 
==                        Regularized Gradient |   0 /  10 | 
==                                   --------------------------------
==                                             |   0 / 100 | 
== 
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
!! Submission failed: unexpected error: parse error near line 26 of file /Users/Usamahk/Documents/Courses and Books/Coursera/Machine Learning/ex8/estimateGaussian.m

  syntax error

>>> sigma2(i) = (sum(X(i,:))-mu(i)).^2);
                                      ^

!! Please try again later.
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
== 
==                                   Part Name |     Score | Feedback
==                                   --------- |     ----- | --------
==                Estimate Gaussian Parameters |   0 /  15 | 
==                            Select Threshold |   0 /  15 | 
==                Collaborative Filtering Cost |   0 /  20 | 
==            Collaborative Filtering Gradient |   0 /  30 | 
==                            Regularized Cost |   0 /  10 | 
==                        Regularized Gradient |   0 /  10 | 
==                                   --------------------------------
==                                             |   0 / 100 | 
== 
>> for i = 1:m
> mu(i) = (1/n)*sum(X(i,:));
> sigma2(i) = (sum(X(i,:))-mu(i)).^2;
> 
> end
>> 
>> who
Variables in the current scope:

F1        Xval      epsilon   m         n         p         sigma2    yval
X         ans       i         mu        outliers  pval      xNew

>> whos
Variables in the current scope:

   Attr Name          Size                     Bytes  Class
   ==== ====          ====                     =====  ===== 
        F1            1x1                          8  double
        X          1000x11                     88000  double
        Xval        100x11                      8800  double
        ans          10x1                         80  double
        epsilon       1x1                          8  double
        i             1x1                          8  double
        m             1x1                          8  double
        mu         1000x11                     88000  double
        n             1x1                          8  double
        outliers      0x1                          0  double
        p          1000x1                       8000  double
        pval        100x1                        800  double
        sigma2        1x1000                    8000  double
        xNew       1000x1                       8000  double
        yval        100x1                        800  double

Total is 26315 elements using 210520 bytes

>> mu = zeros(n, 1);
>> sigma2 = zeros(n, 1);
>> 
>> for i = 1:m
> mu(i) = (1/n)*sum(X(i,:));
> sigma2(i) = (sum(X(i,:))-mu(i)).^2;
> 
> end
>> whos
Variables in the current scope:

   Attr Name          Size                     Bytes  Class
   ==== ====          ====                     =====  ===== 
        F1            1x1                          8  double
        X          1000x11                     88000  double
        Xval        100x11                      8800  double
        ans          10x1                         80  double
        epsilon       1x1                          8  double
        i             1x1                          8  double
        m             1x1                          8  double
        mu         1000x1                       8000  double
        n             1x1                          8  double
        outliers      0x1                          0  double
        p          1000x1                       8000  double
        pval        100x1                        800  double
        sigma2     1000x1                       8000  double
        xNew       1000x1                       8000  double
        yval        100x1                        800  double

Total is 16315 elements using 130520 bytes

>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): n
Login (email address): 
Token: 
!! Submission Cancelled
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Login (email address): usamah.khan@gmail.com
Token: 7cdXYaxF5fK1KXSI
== 
==                                   Part Name |     Score | Feedback
==                                   --------- |     ----- | --------
==                Estimate Gaussian Parameters |   0 /  15 | 
==                            Select Threshold |   0 /  15 | 
==                Collaborative Filtering Cost |   0 /  20 | 
==            Collaborative Filtering Gradient |   0 /  30 | 
==                            Regularized Cost |   0 /  10 | 
==                        Regularized Gradient |   0 /  10 | 
==                                   --------------------------------
==                                             |   0 / 100 | 
== 
>> n
n =  11
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
== 
==                                   Part Name |     Score | Feedback
==                                   --------- |     ----- | --------
==                Estimate Gaussian Parameters |   0 /  15 | 
==                            Select Threshold |   0 /  15 | 
==                Collaborative Filtering Cost |   0 /  20 | 
==            Collaborative Filtering Gradient |   0 /  30 | 
==                            Regularized Cost |   0 /  10 | 
==                        Regularized Gradient |   0 /  10 | 
==                                   --------------------------------
==                                             |   0 / 100 | 
== 
>> mu
mu =

   4.5041573
  -1.7705037
   2.8768783
  -1.9967815
  -4.0574273
  -3.2108814
   1.0762318
   2.1574941
   1.7090155
   1.1730940
  -0.2359001
  -4.5489361
  -1.6315889
   4.3317045
   1.3186148
   1.9991993
   0.7106622
  -1.7193125
   2.4939528
   0.7250510
   4.8747361
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
== 
==                                   Part Name |     Score | Feedback
==                                   --------- |     ----- | --------
==                Estimate Gaussian Parameters |  15 /  15 | Nice work!
==                            Select Threshold |   0 /  15 | 
==                Collaborative Filtering Cost |   0 /  20 | 
==            Collaborative Filtering Gradient |   0 /  30 | 
==                            Regularized Cost |   0 /  10 | 
==                        Regularized Gradient |   0 /  10 | 
==                                   --------------------------------
==                                             |  15 / 100 | 
== 
>> whos
Variables in the current scope:

   Attr Name          Size                     Bytes  Class
   ==== ====          ====                     =====  ===== 
        F1            1x1                          8  double
        X          1000x11                     88000  double
        Xval        100x11                      8800  double
        ans          10x1                         80  double
        epsilon       1x1                          8  double
        i             1x1                          8  double
        m             1x1                          8  double
        mu         1000x1                       8000  double
        n             1x1                          8  double
        outliers      0x1                          0  double
        p          1000x1                       8000  double
        pval        100x1                        800  double
        sigma2     1000x1                       8000  double
        xNew       1000x1                       8000  double
        yval        100x1                        800  double

Total is 16315 elements using 130520 bytes

>> pval
pval =

   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
   Inf
>> 
>> yval
yval =

   1
   0
   0
   1
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   1
   0
>> sum(yval == 1)
ans =  10
>> sum(yval == 0)
ans =  90
>> sum(pval == 0)
ans = 0
>> sum(pval == 1)
ans = 0
>> sum(pval == ing)
error: 'ing' undefined near line 1 column 13
error: evaluating argument list element number 1
>> sum(pval == inf)
ans =  100
>> predictions = (pval < epsilon);
>> whos
Variables in the current scope:

   Attr Name             Size                     Bytes  Class
   ==== ====             ====                     =====  ===== 
        F1               1x1                          8  double
        X             1000x11                     88000  double
        Xval           100x11                      8800  double
        ans              1x1                          8  double
        epsilon          1x1                          8  double
        i                1x1                          8  double
        m                1x1                          8  double
        mu            1000x1                       8000  double
        n                1x1                          8  double
        outliers         0x1                          0  double
        p             1000x1                       8000  double
        predictions    100x1                        100  logical
        pval           100x1                        800  double
        sigma2        1000x1                       8000  double
        xNew          1000x1                       8000  double
        yval           100x1                        800  double

Total is 16406 elements using 130548 bytes

>> predictions
predictions =

   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
>> sum(predictions == 1)
ans = 0
>> bestEpsilon = 0;
>> bestF1 = 0;
>> F1 = 0;
>> 
>> stepsize = (max(pval) - min(pval)) / 1000;
>> for epsilon = min(pval):stepsize:max(pval)
> predictions = (pval < epsilon);
> predictions
> 
> end
>> bestEpsilon = 0;
>> bestF1 = 0;
>> F1 = 0;
>> 
>> stepsize = (max(pval) - min(pval)) / 1000;
>> for epsilon = min(pval):stepsize:max(pval) end
>> epsilon
epsilon = 0
>> stepsize
stepsize = NaN
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
warning: division by zero
== 
==                                   Part Name |     Score | Feedback
==                                   --------- |     ----- | --------
==                Estimate Gaussian Parameters |  15 /  15 | Nice work!
==                            Select Threshold |  15 /  15 | Nice work!
==                Collaborative Filtering Cost |   0 /  20 | 
==            Collaborative Filtering Gradient |   0 /  30 | 
==                            Regularized Cost |   0 /  10 | 
==                        Regularized Gradient |   0 /  10 | 
==                                   --------------------------------
==                                             |  30 / 100 | 
== 
>> submit()
== Submitting solutions | Anomaly Detection and Recommender Systems...
Use token from last successful submission (usamah.khan@gmail.com)? (Y/n): y
warning: division by zero
== 
==                                   Part Name |     Score | Feedback
==                                   --------- |     ----- | --------
==                Estimate Gaussian Parameters |  15 /  15 | Nice work!
==                            Select Threshold |  15 /  15 | Nice work!
==                Collaborative Filtering Cost |  20 /  20 | Nice work!
==            Collaborative Filtering Gradient |  30 /  30 | Nice work!
==                            Regularized Cost |  10 /  10 | Nice work!
==                        Regularized Gradient |  10 /  10 | Nice work!
==                                   --------------------------------
==                                             | 100 / 100 | 
== 
>> 
